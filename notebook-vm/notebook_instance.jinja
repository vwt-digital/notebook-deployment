resources:
- name: {{ env["project"] }}-vn
  type: compute.v1.network
  properties:
    autoCreateSubnetworks: true

- name: {{ env["project"] }}-fw
  type: compute.v1.firewall
  properties:
    network: $(ref.{{ env["project"] }}-vn.selfLink)
    allowed:
    - IPProtocol: TCP
      ports:
      - 22

- name: {{ env["project"] }}-vm
  type: compute.v1.instance
  properties:
    zone: {{ properties["zone"] }}
    machineType: https://www.googleapis.com/compute/v1/projects/{{ env["project"] }}/zones/{{ properties["zone"] }}/machineTypes/{{ properties["machineType"] }}
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: https://www.googleapis.com/compute/v1/projects/deeplearning-platform-release/global/images/family/{{ properties["imageFamily"] }}
    networkInterfaces:
    - network: $(ref.{{ env["project"] }}-vn.selfLink)
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
    metadata:
     items:
       - key: startup-script
         value: |
            #! /bin/bash
            apt-get install sysstat bc

            cat >/usr/local/bin/ashutdown <<EOL
            #!/bin/bash

            # Number of sequential checks when the instance had utilization below the threshold.
            COUNTER=0
            # If actual CPU utilization is below this threshold script will increase the counter.
            THRESHOLD_PERCENT=2
            # Interval between checks of the CPU utilizations.
            SLEEP_INTERVAL_SECONDS=5
            # How big COUNTER need to be for the script to shutdown the instance. For example,
            # if we want an instance to be stopped after 20min of idle. Each utilization probe
            # happens every 5sec (SLEEP_INTERVAL_SECONDS), therefore since there are 1200 seconds
            # in 20 min (20 * 60 = 1200) we need counter threshold to be 240 (1200 / 5).
            HALT_THRESHOLD=240
            while true; do
                CPU_PERCENT=$(mpstat -P ALL 1 1 | awk '/Average:/ && $2 ~ /[0â€“9]/ {print $3}')
                if (( $(echo "${CPU_PERCENT} < ${THRESHOLD_PERCENT}" | bc -l) )); then
                    COUNTER=$((COUNTER + 1))
                    if (( $(echo "${COUNTER} > ${HALT_THRESHOLD}" | bc -l) )); then
                        shutdown now
                    fi
                else
                    COUNTER=0
                fi
                sleep "${SLEEP_INTERVAL_SECONDS}"
            done
            EOL

            cat >/lib/systemd/system/ashutdown.service <<EOL
            [Unit]
            Description=Auto Shutdown

            [Service]
            Type=simple
            ExecStart=/usr/local/bin/ashutdown
            PIDFile=/run/ashutdown.pid
            Restart=always

            [Install]
            WantedBy=multi-user.target
            EOL
            systemctl --no-reload --now enable /lib/systemd/system/ashutdown.service

       - key: tags
         value: deeplearning-vm
       {% if properties["mail"] %}
       - key: proxy-user-mail
         value: {{ properties["mail"] }}
       {% endif %}
       - key: proxy-mode
         value: {{ properties["proxy-mode"] }}
       - key: install-nvidia-driver
         value: "True"
    {% if properties["gpu-type"] %}
    guestAccelerators:
      - acceleratorType: https://www.googleapis.com/compute/v1/projects/{{ env["project"] }}/zones/{{ properties["zone"] }}/acceleratorTypes/{{ properties["gpu-type"] }}
        acceleratorCount: {{ properties["gpu-count"] }}
    scheduling:
      onHostMaintenance: "TERMINATE"
    {% endif %}
    serviceAccounts:
    {% if properties["service-account"] %}
      - email: {{ properties["service-account"] }}
        scopes:
        - https://www.googleapis.com/auth/cloud-platform
        - https://www.googleapis.com/auth/userinfo.email
    {% else %}
      - email: {{ env["project_number"] }}-compute@developer.gserviceaccount.com
        scopes:
        - https://www.googleapis.com/auth/cloud-platform
        - https://www.googleapis.com/auth/userinfo.email
    {% endif %}
